ADDRF ...P.. p address of a parameter

[i]addrf[b] arg

------
ADDRG ...P.. p address of a global

constw[i] addr


------
ADDRL ...P.. p address of a local

[i]addrl[b] (arg+sizeof(argspace))

-------
CNST FIUP.. fdx csilh csilh p constant

const[b|w] val


--------
INDIR FIUP.B fdx csilh csilh p fetch

indir

--------
NEG FI.... fdx ilh negation

xorconstw 0xffff
addconstb 1


--------
ADD FIUP.. fdx ilh ilhp p addition

add[const[b|w]]

--------
BAND .IU... ilh ilh bitwise AND

and[const[b|w]]

--------
BOR .IU... ilh ilh bitwise inclusive OR

or[const[b|w]]

--------
BXOR .IU... ilh ilh bitwise exclusive OR

xor[const[b|w]]

--------
DIV FIU... fdx ilh ilh division

callconstw __math_div


--------
LSH .IU... ilh ilh left shift

???????????????????????????????????????????????

--------
MOD .IU... ilh ilh modulus

callconstw __math_mod


--------
MUL FIU... fdx ilh ilh multiplication

callconstw  __math_mul



--------
RSH .IU... ilh ilh right shift

??????????????????????????????????????????????

--------
SUB FIU... fdx ilh ilhp p subtraction


sub[const[b|w]]

--------
ASGN FIUP.B fdx csilh csilh p assignment

store[const[b|w]]

--------
EQ FIU... fdx ilh ilhp jump if equal
GE FIU... fdx ilh ilhp jump if greater than or equal
GT FIU... fdx ilh ilhp jump if greater than
LE FIU... fdx ilh ilhp jump if less than or equal
LT FIU... fdx ilh ilhp jump if less than
NE FIU... fdx ilh ilhp jump if not equal


{je|jge|jg|jle|jl|jne}[constb] destination

--------
ARG FIUP.B fdx ilh ilh p argument

addrl[b] num
store[const[b|w]]

--------
CALL FIUPVB fdx ilh ilh p function call

call[constw]

--------
RET FIUPVB fdx ilh ilh p function return

ret

-------
JUMP ....V. unconditional jump
LABEL ....V. label definition


------
BCOM .IU... ilh ilh bitwise complement

xorconstw 0xffff

CVF FI.... fdx ilh convert from float
CVI FIU... fdx csilh csilhp convert from signed integer
CVP ..U... p convert from pointer
CVU .IUP.. csilh csilh p convert from unsigned integer



HALT ....V. Stop interpreter
ARGSTACK ....V. Create argument stack
VARSTACK ....V. Create local variable stack
SYSCALL FIUP.. fdx ilh ilh p Call special function
SAVESTATE ....V. Saves processor state on stack
NEWSTACK ....V. Creates a new stack
DISCARD FIUP.. fdx ilh ilh p Discard top of stack
